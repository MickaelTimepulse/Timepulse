#!/bin/bash

# Script de restauration depuis un backup pr√©-migration
# Usage: ./restore-backup.sh [chemin_vers_backup]

set -e

if [ -z "$1" ]; then
    echo "‚ùå Erreur : Vous devez sp√©cifier le chemin du backup"
    echo "Usage: ./restore-backup.sh backups/pre-migration-[nom]-[timestamp]"
    echo ""
    echo "Backups disponibles :"
    ls -lt backups/ | grep "^d"
    exit 1
fi

BACKUP_DIR=$1

if [ ! -d "$BACKUP_DIR" ]; then
    echo "‚ùå Erreur : Le r√©pertoire $BACKUP_DIR n'existe pas"
    exit 1
fi

echo "üîÑ RESTAURATION DEPUIS BACKUP"
echo "============================="
echo "Backup : $BACKUP_DIR"
echo ""

# Afficher les informations du backup
if [ -f "$BACKUP_DIR/backup-info.txt" ]; then
    cat "$BACKUP_DIR/backup-info.txt"
    echo ""
fi

# Confirmation
echo "‚ö†Ô∏è  ATTENTION : Cette op√©ration va :"
echo "   - Restaurer les donn√©es de la base"
echo "   - Restaurer les migrations"
echo "   - Potentiellement √©craser des donn√©es existantes"
echo ""
read -p "√ätes-vous s√ªr de vouloir continuer? (oui/non) " -n 1 -r
echo
if [[ ! $REPLY =~ ^[Oo][Uu][Ii]$ ]]; then
    echo "‚ùå Op√©ration annul√©e"
    exit 1
fi

TIMESTAMP=$(date +"%Y%m%d_%H%M%S")

# 1. Sauvegarder l'√©tat actuel avant restauration
echo ""
echo "üíæ [1/4] Cr√©ation d'un backup de s√©curit√© de l'√©tat actuel..."
SAFETY_BACKUP="backups/pre-restore-safety-${TIMESTAMP}"
mkdir -p "$SAFETY_BACKUP"
npm run backup:full
cp backups/*.json "$SAFETY_BACKUP/" 2>/dev/null || true
cp -r supabase/migrations "$SAFETY_BACKUP/" 2>/dev/null || true
echo "‚úÖ Backup de s√©curit√© cr√©√© : $SAFETY_BACKUP"

# 2. Restaurer les migrations
echo ""
echo "üìÑ [2/4] Restauration des migrations..."
if [ -d "$BACKUP_DIR/migrations" ]; then
    cp -r supabase/migrations supabase/migrations.backup-${TIMESTAMP}
    cp -r "$BACKUP_DIR/migrations/"* supabase/migrations/
    echo "‚úÖ Migrations restaur√©es (backup de l'ancien dans migrations.backup-${TIMESTAMP})"
else
    echo "‚ö†Ô∏è  Aucune migration trouv√©e dans le backup"
fi

# 3. Restaurer les donn√©es
echo ""
echo "üóÑÔ∏è  [3/4] Restauration des donn√©es de la base..."

# Compter les fichiers JSON
JSON_COUNT=$(ls -1 "$BACKUP_DIR"/*.json 2>/dev/null | wc -l)

if [ $JSON_COUNT -eq 0 ]; then
    echo "‚ö†Ô∏è  Aucun fichier de donn√©es JSON trouv√©"
else
    echo "   Fichiers trouv√©s : $JSON_COUNT"
    echo "   Utilisation du script TypeScript de restauration..."

    # Cr√©er un script de restauration temporaire
    cat > restore-temp.ts <<'EOF'
import { createClient } from '@supabase/supabase-js';
import * as fs from 'fs';
import * as path from 'path';

const supabase = createClient(
  process.env.VITE_SUPABASE_URL!,
  process.env.VITE_SUPABASE_SERVICE_ROLE_KEY || process.env.VITE_SUPABASE_ANON_KEY!
);

async function restoreTable(tableName: string, data: any[]) {
  console.log(`   üîÑ Restauration de ${tableName} (${data.length} lignes)...`);

  try {
    // Supprimer les donn√©es existantes
    const { error: deleteError } = await supabase
      .from(tableName)
      .delete()
      .neq('id', '00000000-0000-0000-0000-000000000000');

    if (deleteError && !deleteError.message.includes('0 rows')) {
      console.error(`   ‚ö†Ô∏è  Avertissement lors de la suppression de ${tableName}:`, deleteError.message);
    }

    // Ins√©rer les nouvelles donn√©es
    if (data.length > 0) {
      const { error: insertError } = await supabase
        .from(tableName)
        .insert(data);

      if (insertError) {
        console.error(`   ‚ùå Erreur lors de l'insertion dans ${tableName}:`, insertError.message);
        return false;
      }
    }

    console.log(`   ‚úÖ ${tableName} restaur√©e`);
    return true;
  } catch (err) {
    console.error(`   ‚ùå Erreur inattendue pour ${tableName}:`, err);
    return false;
  }
}

async function main() {
  const backupDir = process.argv[2];
  const files = fs.readdirSync(backupDir).filter(f => f.endsWith('.json'));

  for (const file of files) {
    const filePath = path.join(backupDir, file);
    const tableName = file.replace('backup_', '').replace(/\_\d{4}_\d{2}_\d{2}\.json$/, '');

    try {
      const data = JSON.parse(fs.readFileSync(filePath, 'utf-8'));
      if (Array.isArray(data) && data.length > 0) {
        await restoreTable(tableName, data);
      } else {
        console.log(`   ‚è≠Ô∏è  ${tableName} : aucune donn√©e √† restaurer`);
      }
    } catch (err) {
      console.error(`   ‚ùå Erreur lors de la lecture de ${file}:`, err);
    }
  }

  console.log('\n   ‚úÖ Restauration des donn√©es termin√©e');
}

main();
EOF

    npx tsx restore-temp.ts "$BACKUP_DIR"
    rm restore-temp.ts
fi

# 4. Restaurer le code si disponible
echo ""
echo "üíª [4/4] V√©rification du code source..."
if [ -f "$BACKUP_DIR/code-snapshot.tar.gz" ]; then
    echo "   üì¶ Snapshot de code disponible : $BACKUP_DIR/code-snapshot.tar.gz"
    echo "   ‚ÑπÔ∏è  Pour restaurer le code, extraire manuellement cette archive"
else
    echo "   ‚ÑπÔ∏è  Pas de snapshot de code dans ce backup"
fi

echo ""
echo "‚úÖ RESTAURATION TERMIN√âE"
echo "======================="
echo ""
echo "üìã R√©sum√© :"
echo "   ‚úì Backup de s√©curit√© cr√©√© : $SAFETY_BACKUP"
echo "   ‚úì Migrations restaur√©es"
echo "   ‚úì Donn√©es restaur√©es"
echo ""
echo "üß™ √âtapes suivantes recommand√©es :"
echo "   1. V√©rifier que l'application fonctionne : npm run dev"
echo "   2. Tester les fonctionnalit√©s critiques"
echo "   3. V√©rifier les donn√©es dans Supabase Dashboard"
echo ""
echo "‚ö†Ô∏è  En cas de probl√®me, vous pouvez restaurer l'√©tat pr√©c√©dent :"
echo "   ./restore-backup.sh $SAFETY_BACKUP"
